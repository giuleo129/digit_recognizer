# -*- coding: utf-8 -*-
"""recognizer_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r8Wm-HNYIUfLNg1o7GyFYSN12J_6ZDZS
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk, ImageOps
import torchvision.transforms as transforms

# CNN
class DigitCNN(nn.Module):
    def __init__(self):
        super(DigitCNN, self).__init__()
        # Convolutional layers
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=16, kernel_size=3, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv2 = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, padding=1)
        # Fully connected layers
        self.fc1 = nn.Linear(32 * 7 * 7, 128)  # after the pooling, 28x28 became 7x7
        self.fc2 = nn.Linear(128, 10)           # 10 classes for 0-9

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = torch.flatten(x, 1)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Inizializza il modello
model = DigitCNN()
checkpoint = torch.load("weight_gl.pth", map_location=torch.device('cpu'))
model.load_state_dict(checkpoint["state_dict"])
model.eval()

def predict_digit(image_path):

    image = Image.open(image_path).convert("L")  
    
    if image.getextrema()[0] > 128:
        image = ImageOps.invert(image)
    
    transform = transforms.Compose([
        transforms.Grayscale(num_output_channels=1),  
        transforms.Resize((28, 28)), 
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))  
    ])

    image = transform(image).unsqueeze(0)  

    with torch.no_grad():
        output = model(image)
        prediction = output.argmax(dim=1).item()

    return prediction

def upload_image():
    file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg;*.png;*.jpeg")])
    if not file_path:
        return
    image = Image.open(file_path)
    image.thumbnail((200, 200))
    img_tk = ImageTk.PhotoImage(image)
    panel.config(image=img_tk)
    panel.image = img_tk

    digit = predict_digit(file_path)
    result_label.config(text=f"Numero riconosciuto: {digit}")

root = tk.Tk()
root.title("Riconoscimento Cifre")
root.geometry("300x400")

btn = tk.Button(root, text="Carica Immagine", command=upload_image)
btn.pack(pady=20)

panel = tk.Label(root)
panel.pack()

result_label = tk.Label(root, text="", font=("Arial", 14))
result_label.pack(pady=20)

root.mainloop()